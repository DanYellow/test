name: Test pipeline
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€ - ${{ github.ref }}
on:
    workflow_dispatch:
        inputs:
          # environment:
          #   type: environment
          #   required: false
          #   description: Environment
          #   default: ''
          stage:
            type: choice
            description: Select stage env
            default: stage2
            options:
              - stage1
              - stage2
          # bdd_chemin:
          #   type: string
          #   required: false
          #   description: Chemin du fichier d'export de la base de donnÃ©es
          #   default: 'mon-dump.sql'
    # [workflow_dispatch]


jobs:
    test:
      runs-on: ubuntu-latest
      steps:
        - name: head_ref
          run: echo "${{ github.head_ref  }}"
        - name: ref_name
          run: echo "${{ github.ref_name }}"
        - name: Adding markdown
          run: echo '### Hello world! ðŸš€' >> $GITHUB_STEP_SUMMARY
    collaborators:
      runs-on: ubuntu-latest
      steps:
        - run: |
            list_collaborators="$(gh api /repos/DanYellow/test/collaborators)"
            list_collaborators_login=`echo $list_collaborators | jq '[.[].login]'`
            # echo "$list_collaborators_login"

            res=()
            for collaborator in `echo $list_collaborators_login | jq  -c '.[]'`; do
              # collaborator_login="$(gh api /users/$collaborator)"
              echo "/users/{collaborator}"
              # echo "$collaborator_login"
            done

            # while read -r repo; do echo "do something with $repo"; done



            # list_collaborators_login=$($list_collaborators | jq '[.[].login]')
            # $list_collaborators_login=$(jq '[.[].login]' <<< "$list_collaborators")


            # echo $list_collaborators | jq '[.[].login]'

            # $list_collaborators_login=$(echo "$list_collaborators" | jq '[.[].login]')


            # echo "$list_collaborators" | jq '.[].login' | while read -r collaborator_login; do list_collaborators_login+=($collaborator_login); done
            # echo "$list_collaborators" | jq '.[].login' | while read -r collaborator_login; do list_collaborators_login+=($collaborator_login); done
            # "$list_collaborators" | jq '.[].login' | while read -r collaborator_login; do list_collaborators_login+=($collaborator_login); done
            # "$list_collaborators" | jq '.[].login' | while read -r collaborator_login; do list_collaborators_login+=($collaborator_login"); done
            # "$list_collaborators" | jq '.[].login' | while read -r collaborator_login; do echo "do something with $collaborator_login"; done
            # echo "$list_collaborators" | jq '.[].login' | while read -r collaborator_login; do echo "do something with $collaborator_login"; done

          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # mysql2:
    #   runs-on: ubuntu-latest
    # #   if: "${{ github.event.inputs.bdd_chemin != ''}}"
    # #   if: "${{ github.event.inputs.bdd_chemin != '' && hashFiles(github.event.inputs.bdd_chemin) != '' }}"
    #   steps:
    #     - name: Check out repository code
    #       uses: actions/checkout@v4
    #     - name: Set github user
    #       run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
    #     # - name: Check if file exists
    #     #   if: ${{ hashFiles(github.event.inputs.bdd_chemin) != '' }}
    #     #   run: |
    #     #       # echo "${{ hashFiles('database.sql') }}"
    #     #       # # echo "${{ hashFiles(format('{0}', github.event.inputs.bdd_chemin)) }}"
    #     #       exit 1
    #     - run: |
    #         sudo /etc/init.d/mysql start
    #       if: ${{ hashFiles(github.event.inputs.bdd_chemin) != '' }}
    #     # mysql -u ${{secrets.MYSQL_USER}} -p database_name < database.sql
    #     - name: Run script file
    #       run: |
    #           chmod +x ./test.sh
    #           ./test.sh
    #     # - name: Import db
    #     #   if: ${{ hashFiles(github.event.inputs.bdd_chemin) != '' && hashFiles(github.event.inputs.bdd_chemin) != '' }}
    #     #   run: |
    #     #     mysql -u ${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} -h ${{secrets.MYSQL_SERVER}}
    #     #     mysql -u ${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} -h ${{secrets.MYSQL_SERVER}} ${{secrets.MYSQL_DATABASE}} < ${{github.event.inputs.bdd_chemin}}

    #     #     # mysql -u ${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} -h ${{secrets.MYSQL_SERVER}}
    #     #     # mysql -u${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} -h ${{secrets.MYSQL_SERVER}} --execute="USE ${{secrets.MYSQL_DATABASE}}; SHOW TABLES;"
    #     #     # # value=$(<database.sql)
    #     #     # # echo "$value"
    #     #     # mysql -u${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} -h ${{secrets.MYSQL_SERVER}} ${{secrets.MYSQL_DATABASE}} < database.sql
    #     #   # mysql -u${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} -h ${{secrets.MYSQL_SERVER}} --execute="SHOW TABLES;"
    #     #   # mysql -u ${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} ${{secrets.MYSQL_DATABASE}} --execute="SHOW TABLES; "
    #     - name: message if db migration is skipped
    #       if: ${{ hashFiles(github.event.inputs.bdd_chemin) == '' }}
    #       run: echo "::notice title=${{ github.job.name }}::${{ github.event.inputs.bdd_chemin }} file not found. DB migration skipped"

#   unit_tests:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out repository code
#         uses: actions/checkout@v4
#       - name: Set github user
#         run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
#       - name: Install the dependencies
#         run: npm ci
#       - run: echo "$FOO"
#       # - run: echo "${{toJSON(github)}}"
#       - name: Run unit tests
#         run: npm run test --if-present
#       # - name: Display date
#       #   run: FOO=$(date +'%Y-%m-%dT%H:%M:%S')
#       - name: Display date
#         run: echo "MY_VAR=$(date +'%Y/%m/%d')" >> "$GITHUB_ENV"
#       - run: |
#           printf '%s\n' "$VITE_HELLO" # This will output 'yellow'
#   e2e_tests:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out repository code
#         uses: actions/checkout@v4
#       - name: Set github user
#         run: git config user.email "test@example.com" && git config user.name "CI/CD"
#       - name: Install the dependencies
#         run: npm ci
#       - name: Install playwright
#         run: npx playwright install --with-deps
#       - name: Run smoke tests
#         run: npx playwright test --project=chromium --grep @smoke
#       - name: Run non-smoke tests
#         run: npx playwright test --project=chromium --grep-invert @smoke
    # build:
    #   # needs: [unit_tests, e2e_tests]
    # #   needs: [mysql2]
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Check out repository code
    #       uses: actions/checkout@v4
    #     - name: Set github user
    #       run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
    #     - name: Install the dependencies
    #       run: npm ci
    #     - name: Display date
    #       run: echo "VITE_HELLO=$(date +'%Y-%m-%dT%H-%M-%S')" >> "$GITHUB_ENV"
    #     - name: Create build
    #       run: npm run build
    #     - run: |
    #         chmod +x ${{ github.workspace }}/copy.sh
    #         ${{ github.workspace }}/copy.sh ${{ github.workspace }}
    #     # - run: cp ${{ github.workspace }}/test.sh ${{ github.workspace }}/dist
    #     # - run: cp ${{ github.workspace }}/rsync-exclude.txt ${{ github.workspace }}/dist
    #     # - run: cd ${{ github.workspace }}/dist && ls -al
    #     - name: Generate artifact
    #       uses: actions/upload-artifact@master
    #       with:
    #         name: bundle
    #         path: ./dist

    # deploy:
    #   runs-on: ubuntu-latest
    #   needs: [build]
    # #   environment: staging_environment
    #   steps:
        # - name: Download artifact
        #   uses: actions/download-artifact@master
        #   with:
        #     name: bundle
    #     - name: Create env file
    #       run: |
    #         echo "VITE_HELLO2=$(date +'%Y-%m-%dT%H-%M-%S')" >> "$GITHUB_ENV"
    #     - name: read env file
    #       env:
    #         JSON_DOC: ${{ github.actor }}
    #       run: |
    #         # printf "${{ github.ref }}"
    #         # printf "${{ github.ref_name }}"
    #         # echo "{\"Name\": "${{ env.JSON_DOC }}" }" > foo2.json
    #         echo '${{ toJSON(secrets) }}' > foo3.json
    #     - name: echo
    #       run: |
    #         echo "$( echo "$values" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' foo2.json )" > .env2
    #         echo "$( echo "$values" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' foo.json )" > .env
    #     - name: Add ssh key
    #       run: mkdir -p ~/.ssh && touch ~/.ssh/deploy_key
    #     - name: Fill ssh key
    #       run: echo "${{secrets.SSH_KEY}}" > ~/deploy_key && chmod 600 ~/deploy_key
    #       # run: echo "${{secrets.SSH_KEY}}" > ~/.ssh/deploy_key && chmod 600 ~/.ssh/deploy_key
    #     - name: Run script file
    #       run: |
    #         ls -al
    #         echo ${{ github.workspace }}
    #         echo $GITHUB_WORKSPACE
    #         chmod +x ${{ github.workspace }}/test.sh
    #         ${{ github.workspace }}/test.sh
    #     - run: ssh -i ~/deploy_key -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.SERVER }} 'rm -rf ~/www/*'
    #     - name: Move files
    #       run: rsync -Pavz --include='consignes.js' --include='consignes.css' --exclude='*' -e "ssh -i ~/deploy_key -o StrictHostKeyChecking=no" ${{ github.workspace }}/ ${{ secrets.USER }}@${{ secrets.SERVER }}:~/www
    #       # run: rsync -Pavz --exclude-from='rsync-exclude.txt' -e "ssh -i ~/deploy_key -o StrictHostKeyChecking=no" ./ ${{ secrets.USER }}@${{ secrets.SERVER }}:~/www
    #     # - run: ssh -i ~/deploy_key -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.SERVER }} 'rm ~/www/foo.json ~/www/foo2.json'

    # ending:
    #   needs: [deploy]
    #   runs-on: ubuntu-latest
    #   if: ${{ success() }}
    #   steps:
    #     - name: Fill ssh key
    #       run: echo "Hello"
